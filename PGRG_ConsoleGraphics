#ifndef Pratima_ConsoleGraphics_H
#define Pratima_ConsoleGraphics_H
#include <windows.h>

typedef struct CONSOLE_FONT_INFOEX
{
	ULONG cbSize;
	DWORD nFont;
	COORD dwFontSize;
	UINT FontFamily;
	UINT FontWeight;
	WCHAR FaceName[LF_FACESIZE];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;

BOOL WINAPI SetCurrentConsoleFontEx(HANDLE h, BOOL b, PCONSOLE_FONT_INFOEX lp);

int nScreenWidth = 0;
int nScreenHeight = 0;
COORD charBufSize = {899, 329};
COORD coordDest = {0, 0};
SMALL_RECT windowSize = {0, 0, 898, 328};
HANDLE hConsole;
CHAR_INFO Canvas;
CHAR_INFO buffer[899 * 329];
CHAR_INFO *screen = buffer;

void PGRG_WindowStart(int Screen_Width, int Screen_Height, int Font_Size)
{
	nScreenWidth = Screen_Width;
	nScreenHeight = Screen_Height;
	HANDLE wHnd;
	CONSOLE_FONT_INFOEX cfi;
	cfi.cbSize = sizeof(cfi);
	cfi.nFont = 0;
	cfi.dwFontSize.X = Font_Size;
	cfi.dwFontSize.Y = Font_Size;
	int nBufferWidth = nScreenWidth - 2;
	int nBufferHeight = nScreenHeight - 2;
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);

	hConsole = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);

	SetConsoleScreenBufferSize(hConsole, charBufSize);
	SetConsoleActiveScreenBuffer(hConsole);
	SetCurrentConsoleFontEx(hConsole, FALSE, &cfi);
	buffer[(nScreenWidth - 1) * (nScreenHeight - 1)];
}

void DrawLine(int x1, int y1, int x2, int y2, CHAR_INFO buffer[])
{
	int x, y, dx, dy, dx1, dy1, px, py, xe, ye, i;
	dx = x2 - x1;
	dy = y2 - y1;
	dx1 = abs(dx);
	dy1 = abs(dy);
	px = 2 * dy1 - dx1;
	py = 2 * dx1 - dy1;
	if (dy1 <= dx1)
	{
		if (dx >= 0)
		{
			x = x1;
			y = y1;
			xe = x2;
		}
		else
		{
			x = x2;
			y = y2;
			xe = x1;
		}

		buffer[y * (nScreenWidth - 1) + x].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;

		for (i = 0; x < xe; i++)
		{
			x = x + 1;
			if (px < 0)
				px = px + 2 * dy1;
			else
			{
				if ((dx < 0 && dy < 0) || (dx > 0 && dy > 0))
					y = y + 1;
				else
					y = y - 1;
				px = px + 2 * (dy1 - dx1);
			}

			buffer[y * (nScreenWidth - 1) + x].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;
		}
	}
	else
	{
		if (dy >= 0)
		{
			x = x1;
			y = y1;
			ye = y2;
		}
		else
		{
			x = x2;
			y = y2;
			ye = y1;
		}

		buffer[y * (nScreenWidth - 1) + x].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;

		for (i = 0; y < ye; i++)
		{
			y = y + 1;
			if (py <= 0)
				py = py + 2 * dx1;
			else
			{
				if ((dx < 0 && dy < 0) || (dx > 0 && dy > 0))
					x = x + 1;
				else
					x = x - 1;
				py = py + 2 * (dx1 - dy1);
			}

			buffer[y * (nScreenWidth - 1) + x].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;
		}
	}
}

#endif
