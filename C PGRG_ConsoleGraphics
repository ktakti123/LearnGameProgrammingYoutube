#ifndef Pratima_ConsoleGraphics_H
#define Pratima_ConsoleGraphics_H
#include <windows.h>

typedef struct CONSOLE_FONT_INFOEX
{
	ULONG cbSize;
	DWORD nFont;
	COORD dwFontSize;
	UINT FontFamily;
	UINT FontWeight;
	WCHAR FaceName[LF_FACESIZE];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;
typedef CHAR_INFO PGRG;

BOOL WINAPI SetCurrentConsoleFontEx(HANDLE h, BOOL b, PCONSOLE_FONT_INFOEX lp);

int nScreenWidth = 0;
int nScreenHeight = 0;
COORD charBufSize = {0, 0};
COORD coordDest = {0, 0};
SMALL_RECT windowSize = {0, 0, 0, 0};
HANDLE hConsole;

void PGRG_WindowStart(int Screen_Width, int Screen_Height, int Font_Size)
{
	nScreenWidth = Screen_Width;
	nScreenHeight = Screen_Height;
	HANDLE wHnd;
	charBufSize.X = nScreenWidth-1;
	charBufSize.Y = nScreenHeight-1;
	CONSOLE_FONT_INFOEX cfi;
	cfi.cbSize = sizeof(cfi);
	cfi.nFont = 0;
	cfi.dwFontSize.X = Font_Size;
	cfi.dwFontSize.Y = Font_Size;
	windowSize.Right = nScreenWidth-2;
	windowSize.Bottom= nScreenHeight-2;
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);

	hConsole = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);

	SetConsoleScreenBufferSize(hConsole, charBufSize);
	SetConsoleActiveScreenBuffer(hConsole);
	SetCurrentConsoleFontEx(hConsole, FALSE, &cfi);
}
void PGRG_FillColor(CHAR_INFO buffer[]){
	for (int i = 0; i < nScreenWidth * nScreenHeight; ++i)
	{
		buffer[i].Char.AsciiChar = ' ';
		buffer[i].Attributes = BACKGROUND_RED | BACKGROUND_INTENSITY;
	}
}
void PGRG_Display(CHAR_INFO buffer[]){
 PGRG *screen = buffer;
WriteConsoleOutput(hConsole, screen, charBufSize, coordDest, &windowSize);
}

		
void PGRG_DrawLine(int x1, int y1, int x2, int y2, CHAR_INFO buffer[])
{
	int x, y, dx, dy, dx1, dy1, px, py, xe, ye, i;
	dx = x2 - x1;
	dy = y2 - y1;
	dx1 = abs(dx);
	dy1 = abs(dy);
	px = 2 * dy1 - dx1;
	py = 2 * dx1 - dy1;
	if (dy1 <= dx1)
	{
		if (dx >= 0)
		{
			x = x1;
			y = y1;
			xe = x2;
		}
		else
		{
			x = x2;
			y = y2;
			xe = x1;
		}

		buffer[y * (nScreenWidth - 1) + x].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;

		for (i = 0; x < xe; i++)
		{
			x = x + 1;
			if (px < 0)
				px = px + 2 * dy1;
			else
			{
				if ((dx < 0 && dy < 0) || (dx > 0 && dy > 0))
					y = y + 1;
				else
					y = y - 1;
				px = px + 2 * (dy1 - dx1);
			}

			buffer[y * (nScreenWidth - 1) + x].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;
		}
	}
	else
	{
		if (dy >= 0)
		{
			x = x1;
			y = y1;
			ye = y2;
		}
		else
		{
			x = x2;
			y = y2;
			ye = y1;
		}

		buffer[y * (nScreenWidth - 1) + x].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;

		for (i = 0; y < ye; i++)
		{
			y = y + 1;
			if (py <= 0)
				py = py + 2 * dx1;
			else
			{
				if ((dx < 0 && dy < 0) || (dx > 0 && dy > 0))
					x = x + 1;
				else
					x = x - 1;
				py = py + 2 * (dx1 - dy1);
			}

			buffer[y * (nScreenWidth - 1) + x].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;
		}
	}
}
void PGRG_DrawCircle(int xc, int yc, int r,CHAR_INFO buffer[])
	{
		int x = 0;
		int y = r;
		int p = 3 - 2 * r;
		if (!r) return;

		while (y >= x) // only formulate 1/8 of circle
		{
			buffer[(yc-y) * (nScreenWidth - 1) + (xc-x)].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;//upper left left
			buffer[(yc-x) * (nScreenWidth - 1) + (xc - y)].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;//upper upper left
			buffer[(yc - x) * (nScreenWidth - 1) + (xc + y)].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;//upper upper right
			buffer[(yc - y) * (nScreenWidth - 1) + (xc + x)].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;//upper right right
			buffer[(yc + y) * (nScreenWidth - 1) + (xc - x)].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;//lower left left
			buffer[(yc + x) * (nScreenWidth - 1) + (xc - y)].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;//lower lower left
			buffer[(yc + x) * (nScreenWidth - 1) + (xc + y)].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;//lower lower right
			buffer[(yc + y) * (nScreenWidth - 1) + (xc + x)].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;//lower right right
			if (p < 0) p += 4 * x++ + 6;
			else p += 4 * (x++ - y--) + 10;
		}
	}
	void PGRG_FillCircle(int center_x, int center_y, int radius,CHAR_INFO buffer[]) {
    int x, y;
    
    for (y = -radius; y <= radius; y++) {
        for (x = -radius; x <= radius; x++) {
            if (x * x + y * y <= radius * radius) {
               	buffer[(center_y + y) * (nScreenWidth - 1) + (center_x + x)].Attributes = BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE;
            }
        }
    }
}


#endif
